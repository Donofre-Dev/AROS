trigger: none

resources:
  pipelines:
    - pipeline: AROSPipeline16
      source: 'aros-development-team.AROS-pc-i386'
      trigger:
        branches:
          include:
            - main

pool:
  vmImage: ubuntu-latest

steps:
  - checkout: self
    persistCredentials: true

  - script: |
      echo "Fetching latest run ID of pipeline 'aros-development-team.AROS-pc-i386'..."

      pipeline_id=$(echo "$(resources.pipeline.AROSPipeline16.pipelineId)")
      echo "Pipeline ID: $pipeline_id"

      run_info=$(curl -s -H "Authorization: Bearer $(System.AccessToken)" \
        "$(System.CollectionUri)$(System.TeamProject)/_apis/pipelines/$pipeline_id/runs?api-version=7.1-preview.1")

      run_id=$(echo "$run_info" | jq -r '.value[0].id')
      echo "Latest run ID: $run_id"

      log_id=32
      echo "Downloading specific log ID ($log_id) for build ID $run_id..."
      curl -sSL -H "Authorization: Bearer $(System.AccessToken)" \
        "$(System.CollectionUri)$(System.TeamProject)/_apis/build/builds/$run_id/logs/$log_id?api-version=6.0" \
        -o log.txt

      echo "Extracting warning lines..."
      grep -E 'warning: no catalog revision|ERROR in iconv|UTF8 conversion|missing translation|original string|missing in catalog description' log.txt > raw-matches.log || true

      echo "Stripping timestamp and absolute path..."
      sed -E 's|^[^ ]+ /home/.*/s/||' raw-matches.log > cleaned-matches.log

      echo "Parsing .gitmodules for submodule paths and URLs..."
      declare -A submodules
      current_path=""
      while IFS= read -r line; do
        if [[ $line =~ path\ =\ (.+) ]]; then
          current_path="${BASH_REMATCH[1]}"
        elif [[ $line =~ url\ =\ (.+) ]]; then
          submodules["$current_path"]="${BASH_REMATCH[1]}"
        fi
      done < .gitmodules

      echo "Grouping matches by submodule..."
      > translation-errors.log
      for path in "${!submodules[@]}"; do
        matches=$(grep "^$path/" cleaned-matches.log)
        if [[ -n "$matches" ]]; then
          echo "### ${submodules[$path]} [$path]" >> translation-errors.log
          echo "$matches" | sed "s|^$path/||" >> translation-errors.log
          echo >> translation-errors.log
        fi
      done

      echo "Unmatched lines:"
      grep -v -Ff <(printf "%s\n" "${!submodules[@]}" | sed 's|$|/|') cleaned-matches.log >> translation-errors.log || true

    displayName: 'Download and Process Logs'
    env:
      System.AccessToken: $(System.AccessToken)

  - task: PublishBuildArtifacts@1
    inputs:
      pathToPublish: 'translation-stage.log'
      artifactName: 'translation-stage-log'
    displayName: 'Publish log artifact'
    condition: succeededOrFailed()
