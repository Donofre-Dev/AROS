# $Id $

include $(SRCDIR)/config/aros.cfg

TARGETDIR       := $(GENDIR)/$(CURDIR)
FILES           := boot
USER_CFLAGS     := -Wall $(CFLAGS_NO_BUILTIN)
KERNEL_LDFLAGS  =
USER_INCLUDES   := -isystem $(SRCDIR)/$(CURDIR)/include -I$(SRCDIR)/rom/openfirmware
USER_CPPFLAGS   := -DTARGET_SECTION_COMMENT=\"\n\#\"
USER_CPPFLAGS   += -DUSE_UBOOT
OPTIMIZATION_CFLAGS := -O2

RISCV_BSP := aros-$(AROS_TARGET_CPU)-bsp.rom
RISCV_COREFILE := $(TARGETDIR)/core.bin.o

#MM- distfiles-sifive_u-riscv : distfiles-sifive_u
#MM- distfiles-sifive_u-riscv-quick : distfiles-sifive_u

#MM- distfiles-sifive_u-quick : distfiles-sifive_u

#MM distfiles-sifive_u : \
#MM kernel-sifive_u-riscv \
#MM kernel-package-sifive_u-riscv

#MM- kernel-package-sifive_u-riscv-quick: \
#MM linklibs-stdc-static-quick \
#MM kernel-package-native-riscv-quick

#MM kernel-package-sifive_u-riscv: \
#MM linklibs-stdc-static \
#MM kernel-package-native-riscv

PKG_LIBS      := aros partition utility oop graphics layers intuition keymap dos poseidon cgxbootpic
PKG_LIBS_ARCH := expansion
PKG_RSRC      := openfirmware misc bootloader dosboot lddemon FileSystem shell shellcommands
PKG_RSRC_ARCH := processor
PKG_DEVS      := input gameport keyboard console
PKG_DEVS_ARCH := timer
PKG_HANDLERS  := con ram cdrom sfs fat afs
PKG_HIDDS     := gfx mouse keyboard hiddclass i2c
PKG_CLASSES   := 

%make_package mmake=kernel-package-sifive_u-riscv file=$(AROSDIR)/$(RISCV_BSP) \
    libs=$(PKG_LIBS) arch_libs=$(PKG_LIBS_ARCH) res=$(PKG_RSRC) \
    arch_res=$(PKG_RSRC_ARCH) devs=$(PKG_DEVS) arch_devs=$(PKG_DEVS_ARCH) \
    handlers=$(PKG_HANDLERS) hidds=$(PKG_HIDDS) classes=$(PKG_CLASSES)

#MM
distfiles-sifive_u-bootimg: $(AROSDIR)/aros-$(AROS_TARGET_CPU)-sifive.img

#MM
distfiles-sifive_u-bootimg-quick: $(AROSDIR)/aros-$(AROS_TARGET_CPU)-sifive.img

$(AROSDIR)/aros-riscv-sifive.img: $(RISCV_COREFILE) $(foreach f, $(FILES), $(TARGETDIR)/$(f).o $(TARGETDIR)/$(f).d) | $(OSGENDIR)/boot
	@$(ECHO) "Creating   $@"
	@$(KERNEL_LD) -Map $(OSGENDIR)/boot/aros-riscv-sifive.img.map --entry=bootstrap --script=$(SRCDIR)/$(CURDIR)/ldscript.lds $(foreach f, $(FILES), $(TARGETDIR)/$(f).o) $ $(RISCV_COREFILE) -L$(AROS_LIB) -lstdc.static -o $(OSGENDIR)/boot/aros-riscv-sifive.img.elf
	@$(TARGET_STRIP) --strip-unneeded -R .note -R .comment $(OSGENDIR)/boot/aros-riscv-sifive.img.elf
	@$(TARGET_OBJCOPY) -O binary $(OSGENDIR)/boot/aros-riscv-sifive.img.elf $@

$(TARGETDIR)/core.bin.o: $(OSGENDIR)/boot/core.elf | $(OSGENDIR)/boot
	@$(CP) $(OSGENDIR)/boot/core.elf $(TARGETDIR)/core.bin
	@cd $(TARGETDIR) && $(KERNEL_LD) $(KERNEL_LDFLAGS) -r --format binary core.bin -o $@

#MM
distfiles-sifive_u : $(AROSDIR)/aros-riscv-sifive.img  $(AROSDIR)/$(RISCV_BSP)
	@$(ECHO) Copying SiFive RISC-V distfiles...
	@$(CP) -R $(AROSDIR) $(DISTDIR)/

#MM
clean ::
	-$(RM) $(TESTS)

$(TARGETDIR)/%.o : %.c
	%compile_q

$(TARGETDIR)/%.o : %.S
	%compile_q

$(TARGETDIR)/%.d : %.c
	%mkdepend_q

$(OSGENDIR)/boot :
	%mkdir_q dir=$@

#
# the following rules are for testing purposes only ..
#

#MM
distfiles-sifive_u-test-imgobjects : $(foreach f, $(FILES), $(TARGETDIR)/$(f).o)

#MM- distfiles-sifive_u-test-imgobjects-quick : distfiles-sifive_u-test-imgobjects

#MM
distfiles-sifive_u-test-img : $(AROSDIR)/aros-riscv-sifive.img

#MM- distfiles-sifive_u-test-img-quick : distfiles-sifive_u-test-img

#
#
#

DEPS	:= $(foreach f, $(FILES), $(TARGETDIR)/$(f).d)

-include $(DEPS)

%common
