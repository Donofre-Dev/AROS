trigger: none

pool:
  vmImage: 'ubuntu-latest'

steps:
- bash: |
    set -euo pipefail

    ORG="aros-development-team"
    PROJECT="AROS"
    PIPELINE_ID=16
    LOG_ID=32

    echo "Fetching latest run ID of pipeline '$ORG.$PROJECT-pc-i386'..."
    BUILD_ID=$(curl -sS -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
      "https://dev.azure.com/$ORG/$PROJECT/_apis/pipelines/$PIPELINE_ID/runs?api-version=6.0-preview.1&\$top=1" \
      | jq -r '.value[0].id')
    echo "Pipeline ID: $PIPELINE_ID"
    echo "Latest run ID: $BUILD_ID"

    echo "Downloading specific log ID ($LOG_ID) for build ID $BUILD_ID..."
    curl -sSL -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
      "https://dev.azure.com/$ORG/$PROJECT/_apis/build/builds/$BUILD_ID/logs/$LOG_ID" -o log.txt

    echo "Extracting warning lines..."
    # Just as example, extract lines containing 'warning' (case-insensitive)
    grep -i warning log.txt > warnings.txt

    echo "Number of warning lines found: $(wc -l < warnings.txt)"

    echo "Stripping timestamp and absolute path..."
    # Remove timestamp and leading path up to and including '/s/'
    sed -E 's/^[0-9T:\.\-Z]+Z? \/home\/vsts\/work\/[0-9]+\/s\///' warnings.txt > warnings_stripped.txt

    echo "Parsing .gitmodules for submodule paths and URLs..."
    # Download the .gitmodules file from repo for this pipeline run
    curl -sSL -H "Authorization: Bearer $SYSTEM_ACCESSTOKEN" \
      "https://dev.azure.com/$ORG/$PROJECT/_apis/git/repositories/$PROJECT/items?path=.gitmodules&version=refs/heads/master&includeContent=true" \
      -o .gitmodules

    # Extract submodule paths and URLs (assuming standard format)
    declare -A submodules
    while IFS= read -r line; do
      if [[ $line =~ path\ =\ (.*) ]]; then
        path="${BASH_REMATCH[1]}"
      elif [[ $line =~ url\ =\ (.*) ]]; then
        url="${BASH_REMATCH[1]}"
        submodules["$path"]="$url"
      fi
    done < .gitmodules

    echo "Grouping matches by submodule..."
    # For each submodule path, output warnings_stripped.txt lines starting with that path
    for path in "${!submodules[@]}"; do
      count=$(grep -c "^$path/" warnings_stripped.txt || true)
      if [[ $count -gt 0 ]]; then
        echo "Submodule: $path (${submodules[$path]})"
        echo "Lines matched: $count"
        grep "^$path/" warnings_stripped.txt || true
        echo ""
      fi
    done

    echo "Unmatched lines:"
    # Lines that do not start with any submodule path
    grep -vE "^($(printf '%s|' "${!submodules[@]}" | sed 's/|$//'))/" warnings_stripped.txt || true

  env:
    SYSTEM_ACCESSTOKEN: $(System.AccessToken)

  displayName: Download and Process Logs
